# Streamlit web app

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import os

st.set_page_config(
    page_title="AQI Forecasting Framework",
    page_icon="ðŸ”®",
    layout="wide"
)

# --- AQI Category Function ---
def get_aqi_category(aqi):
    """Returns the AQI category and a corresponding color."""
    if aqi <= 50:
        return "Good", "green"
    elif aqi <= 100:
        return "Satisfactory", "#90EE90" # LightGreen
    elif aqi <= 200:
        return "Moderate", "gold"
    elif aqi <= 300:
        return "Poor", "orange"
    elif aqi <= 400:
        return "Very Poor", "red"
    else:
        return "Severe", "maroon"

# --- Load Assets ---
DATA_PATH = 'data/city_day.csv'
MODEL_PATH = 'saved_model/xgb_model.pkl'

@st.cache_data
def load_data(path):
    # Load and clean data for ALL cities
    df = pd.read_csv(path)
    df.columns = df.columns.str.strip()
    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
    df.sort_values(['City', 'Date'], inplace=True)
    cols_to_fill = [col for col in df.columns if col not in ['City', 'Date']]
    df[cols_to_fill] = df.groupby('City')[cols_to_fill].ffill()
    df.dropna(inplace=True)
    return df

@st.cache_resource
def load_model(path):
    model = joblib.load(path)
    return model

# Load all data and the model once
full_df = load_data(DATA_PATH)
model = load_model(MODEL_PATH)

# --- UI Layout ---
st.title("Proactive AQI Forecasting Framework ðŸ”®")
st.write(
    "**Team: Harini G [22BDS0085], Abinanthan S [22BDS0122]** | "
    "Shifting from reactive reporting to proactive prevention by forecasting AQI 24 hours in advance."
)

# --- 1. CITY SELECTION ---
st.header("Select a City to Forecast")
available_cities = full_df['City'].value_counts()[full_df['City'].value_counts() > 365].index.tolist()
selected_city = st.selectbox(
    "Choose a city from the dropdown menu:",
    options=available_cities
)

# --- 2. THE FORECAST (DYNAMIC) ---
st.header(f"24-Hour Advance AQI Forecast for {selected_city}")

city_df = full_df[full_df['City'] == selected_city].copy()
latest_data = city_df.iloc[-1:].copy()

latest_data['AQI_lag1'] = latest_data['AQI']
latest_data['AQI_lag2'] = city_df.iloc[-2:-1]['AQI'].values[0]
latest_data['AQI_rolling_mean_7'] = city_df['AQI'].rolling(window=7).mean().iloc[-1]
latest_data['Month'] = latest_data['Date'].dt.month
latest_data['DayOfYear'] = latest_data['Date'].dt.dayofyear

features_for_prediction = model.get_booster().feature_names
prediction_input = latest_data[features_for_prediction]

predicted_aqi = model.predict(prediction_input)[0]
category, color = get_aqi_category(predicted_aqi)

st.metric(label="Predicted AQI for Tomorrow", value=f"{predicted_aqi:.2f}")
st.markdown(f"**Health Advisory: Tomorrow's air quality is predicted to be in the <span style='color:{color};'>{category}</span> category.**", unsafe_allow_html=True)


# --- 3. UNDERSTANDING THE FORECAST (CODE MODIFIED) ---
with st.expander("See How the Forecast is Made"):
    st.write("The forecast is generated by a single generalized XGBoost model. This chart shows the most important factors the model uses to make a prediction.")
    
    # Create feature importance dataframe
    feature_importances = pd.DataFrame({
        'feature': model.get_booster().feature_names, 
        'importance': model.feature_importances_
    }).sort_values('importance', ascending=False).head(10)
    
    # Create and display the plot with Plotly
    fig_importance = px.bar(
        feature_importances, 
        x='importance', 
        y='feature', 
        orientation='h',
        title='Top 10 Feature Importances'
    )
    st.plotly_chart(fig_importance, use_container_width=True)


# --- 4. CONTEXT (HISTORICAL DATA) ---
st.header(f"Context: Historical AQI Trends for {selected_city}")
fig_hist = px.line(city_df, x='Date', y='AQI', title=f'Historical AQI in {selected_city}')

st.plotly_chart(fig_hist, use_container_width=True)
